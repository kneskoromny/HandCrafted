import SwiftUI

final class CatalogViewModel: ObservableObject {
    
    // MARK: - Types
    
    enum SheetSelectType {
        case size, color
    }
    
    // MARK: - Observable
    
    @Published var categoryList: [Category] = []
    @Published var productList: [Product] = []
    @Published var filteredProductList: [Product] = []
    @Published var selectedProduct: Product?
    
    @Published var isLoading = false
    @Published var isSheetPresented = false {
        // FIXME: —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è —à–∏—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∏ —Ç–∞–ø–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä/—Ü–≤–µ—Ç
        didSet {
//            print(#function, "mytest - is presented: \(isSheetPresented)")
        }
    }
    @Published var isAlertPresented = false
    
    // MARK: - Internal Properties
    
    var sheetSelectType: SheetSelectType = .size
    
    // MARK: - Private Propertied
    
    private let dbManager = DatabaseManager()
    
    // MARK: - Private Methods
    
    private func fetchProductList() async throws -> [Product] {
        return try await dbManager.getProductList()
    }
    
    private func fetchCategoryList() async throws -> [Category] {
        return try await dbManager.getCategoryList()
    }
    
}

// MARK: - Computed Properties

extension CatalogViewModel {
    
    var alertTitle: String {
        return selectedProduct == nil ? "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä" : "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üôè"
    }
    var alertMessage: String {
        return selectedProduct == nil ? "" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏?"
    }
    
    var sizeSelectButtonTitle: String? {
        if selectedProduct == nil {
            return "–í—ã–±–µ—Ä–∏—Ç–µ"
        } else {
            return selectedProduct?.selectedSize?.name
        }
    }
    
    var sizeSelectButtonColor: Color {
        return selectedProduct == nil ? .secondary : .primary
    }
    
    var availabilityLabelText: String {
        if let selectedProduct {
            return selectedProduct.selectedSize?.isInStock == true
            ? "–í –Ω–∞–ª–∏—á–∏–∏"
            : "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        } else {
            return "–ù–µ –≤—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä"
        }
    }
    var availabilityLabelColor: Color {
        if let selectedProduct {
            return selectedProduct.selectedSize?.isInStock == true
            ? .green
            : .red
        } else {
            return .secondary
        }
    }
    
    var availabilityInfoText: String {
        if let selectedProduct {
            return selectedProduct.selectedSize?.isInStock == true
            ? "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –º—ã —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
            : "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –Ω–æ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–æ—à—å–µ–º –µ–≥–æ –¥–ª—è –í–∞—Å –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        } else {
            return "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ –º—ã –ø–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ü–µ–Ω–µ"
        }
    }
    
    var similarProductsTitle: String {
        if let selectedProduct,
           selectedProduct.selectedSize?.isInStock == true {
            return "–í–∞–º —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è"
        } else {
            return "–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏"
        }
    }
    
}

// MARK: - Network Methods

extension CatalogViewModel {
    
    func fetchData() {
        guard categoryList.isEmpty else { return }
        isLoading = true
        Task {
            do {
                let productList = try await fetchProductList()
                let categoryList = try await fetchCategoryList()
                await MainActor.run {
                    self.productList = productList
                    self.categoryList = categoryList
                    isLoading = false
                }
            } catch {
                print(#function, "mytest - error: \(error.localizedDescription)")
            }
        }
    }
    
}

// MARK: - Filter Methods

extension CatalogViewModel {
    
    func filterProductList(categoryName: String) {
        guard !productList.isEmpty else {
            print(#function, "mytest - error: no loaded product list")
            return
        }
        filteredProductList = productList
            .filter { $0.categoryName == categoryName }
            .sorted(by: { $0.name < $1.name })
    }
    
    func filterProductList(categoryName: String, exclude productName: String) {
        guard !productList.isEmpty else {
            print(#function, "mytest - error: no loaded product list")
            return
        }
        filteredProductList = productList
            .filter { $0.categoryName == categoryName && $0.name != productName }
    }
    
    func filterProductList(categoryName: String, isInStock: Bool) {
        guard !productList.isEmpty else {
            print(#function, "mytest - error: no loaded product list")
            return
        }
        productList.forEach({ product in
            if product.categoryName == categoryName {
                if let isInStock = product.sizes.first(where: { $0.isInStock == true }) {
                    filteredProductList.append(product)
                }
            }
        })
    }
    
    func getProduct(name: String, colorName: String) -> Product? {
        return filteredProductList.first { product in
            product.name == name && product.color.name == colorName
        }
    }
    
}

// MARK: - User Interaction Methods

extension CatalogViewModel {
    
    func selectButtonTapped(type: SheetSelectType) {
        sheetSelectType = type
        isSheetPresented = true
    }
    
    func addToCartButtonTapped() {
        isAlertPresented = true
    }
    
    func removeSelectedProduct() {
        selectedProduct = nil
    }
    
    func clearFilteredProductList() {
        filteredProductList = []
    }
    
}
